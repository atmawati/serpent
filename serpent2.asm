; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\gh\serpent\serpent2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sbox
_DATA	SEGMENT
_sbox	DB	038H
	DB	0f1H
	DB	0a6H
	DB	05bH
	DB	0edH
	DB	042H
	DB	070H
	DB	09cH
	DB	0fcH
	DB	027H
	DB	090H
	DB	05aH
	DB	01bH
	DB	0e8H
	DB	06dH
	DB	034H
	DB	086H
	DB	079H
	DB	03cH
	DB	0afH
	DB	0d1H
	DB	0e4H
	DB	0bH
	DB	052H
	DB	0fH
	DB	0b8H
	DB	0c9H
	DB	063H
	DB	0d1H
	DB	024H
	DB	0a7H
	DB	05eH
	DB	01fH
	DB	083H
	DB	0c0H
	DB	0b6H
	DB	025H
	DB	04aH
	DB	09eH
	DB	07dH
	DB	0f5H
	DB	02bH
	DB	04aH
	DB	09cH
	DB	03H
	DB	0e8H
	DB	0d6H
	DB	071H
	DB	072H
	DB	0c5H
	DB	084H
	DB	06bH
	DB	0e9H
	DB	01fH
	DB	0d3H
	DB	0a0H
	DB	01dH
	DB	0f0H
	DB	0e8H
	DB	02bH
	DB	074H
	DB	0caH
	DB	093H
	DB	056H
_DATA	ENDS
PUBLIC	@blkxor@8
; Function compile flags: /Ogsp
;	COMDAT @blkxor@8
_TEXT	SEGMENT
@blkxor@8 PROC						; COMDAT
; _dst$ = ecx
; _src$ = edx
; File c:\gh\serpent\serpent2.c
; Line 15
	push	4
	mov	eax, edx
	pop	edx
	sub	eax, ecx
	push	esi
$LL3@:
; Line 16
	mov	esi, DWORD PTR [eax+ecx]
	xor	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL3@
	pop	esi
; Line 18
	ret	0
@blkxor@8 ENDP
_TEXT	ENDS
PUBLIC	@blkcpy@8
; Function compile flags: /Ogsp
;	COMDAT @blkcpy@8
_TEXT	SEGMENT
@blkcpy@8 PROC						; COMDAT
; _dst$ = ecx
; _src$ = edx
; Line 24
	push	4
	mov	eax, edx
	pop	edx
	sub	eax, ecx
	push	esi
$LL3@:
; Line 25
	mov	esi, DWORD PTR [eax+ecx]
	mov	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL3@
	pop	esi
; Line 27
	ret	0
@blkcpy@8 ENDP
_TEXT	ENDS
PUBLIC	@blkclr@4
; Function compile flags: /Ogsp
;	COMDAT @blkclr@4
_TEXT	SEGMENT
@blkclr@4 PROC						; COMDAT
; _blk$ = ecx
; Line 30
	push	edi
; Line 34
	xor	eax, eax
	mov	edi, ecx
	stosd
	stosd
	stosd
	stosd
	pop	edi
; Line 36
	ret	0
@blkclr@4 ENDP
_TEXT	ENDS
PUBLIC	@serpent_ip@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_ip@8
_TEXT	SEGMENT
tv181 = -4						; size = 4
@serpent_ip@8 PROC					; COMDAT
; _in$ = ecx
; _out$ = edx
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 57
	xor	eax, eax
	mov	edi, edx
	stosd
	stosd
	stosd
	stosd
; Line 59
	mov	esi, edx
	mov	DWORD PTR tv181[ebp], 16		; 00000010H
$LL6@:
; Line 60
	push	8
	xor	edi, edi
	pop	ebx
$LL3@:
; Line 61
	mov	eax, edi
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN20@
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN20@:
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	dl, BYTE PTR [eax]
	shr	DWORD PTR [eax], 1
	and	dl, 1
; Line 62
	mov	dl, BYTE PTR [esi]
	sete	al
	dec	al
	and	al, 128					; 00000080H
	shr	dl, 1
	or	al, dl
	inc	edi
	dec	ebx
	mov	BYTE PTR [esi], al
	jne	SHORT $LL3@
; Line 59
	inc	esi
	dec	DWORD PTR tv181[ebp]
	jne	SHORT $LL6@
	pop	edi
	pop	esi
	pop	ebx
; Line 65
	leave
	ret	0
@serpent_ip@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_fp@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_fp@8
_TEXT	SEGMENT
tv286 = -8						; size = 4
tv158 = -4						; size = 4
@serpent_fp@8 PROC					; COMDAT
; _in$ = ecx
; _out$ = edx
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 75
	xor	eax, eax
	mov	edi, edx
	stosd
	stosd
	stosd
	stosd
; Line 77
	mov	eax, ecx
	mov	DWORD PTR tv286[ebp], 4
$LL6@:
; Line 78
	xor	edi, edi
	mov	DWORD PTR tv158[ebp], 32		; 00000020H
$LL3@:
; Line 79
	mov	cl, BYTE PTR [eax]
	shr	DWORD PTR [eax], 1
; Line 80
	mov	esi, edi
	and	cl, 1
	and	esi, -2147483645			; 80000003H
	jns	SHORT $LN20@
	dec	esi
	or	esi, -4					; fffffffcH
	inc	esi
$LN20@:
	movzx	ecx, cl
	neg	ecx
	sbb	ecx, ecx
	lea	esi, DWORD PTR [edx+esi*4]
	mov	ebx, DWORD PTR [esi]
	and	ecx, -2147483648			; 80000000H
	shr	ebx, 1
	or	ecx, ebx
	inc	edi
	dec	DWORD PTR tv158[ebp]
	mov	DWORD PTR [esi], ecx
	jne	SHORT $LL3@
; Line 77
	add	eax, 4
	dec	DWORD PTR tv286[ebp]
	jne	SHORT $LL6@
	pop	edi
	pop	esi
	pop	ebx
; Line 83
	leave
	ret	0
@serpent_fp@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_lt@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_lt@8
_TEXT	SEGMENT
@serpent_lt@8 PROC					; COMDAT
; _x$ = ecx
; _type$ = edx
; Line 99
	mov	eax, DWORD PTR [ecx+4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx]
	rol	esi, 13					; 0000000dH
	push	edi
	mov	edi, DWORD PTR [ecx+8]
	rol	edi, 3
	xor	eax, edi
	xor	eax, esi
; Line 100
	mov	edx, esi
	shl	edx, 3
	xor	edx, DWORD PTR [ecx+12]
; Line 101
	rol	eax, 1
	xor	edx, edi
; Line 102
	rol	edx, 7
; Line 109
	mov	DWORD PTR [ecx+4], eax
	mov	ebx, edx
	xor	ebx, eax
	shl	eax, 7
	xor	ebx, esi
	xor	eax, edx
	xor	eax, edi
	rol	ebx, 5
	pop	edi
	ror	eax, 10					; 0000000aH
	pop	esi
	mov	DWORD PTR [ecx], ebx
; Line 110
	mov	DWORD PTR [ecx+8], eax
; Line 111
	mov	DWORD PTR [ecx+12], edx
	pop	ebx
; Line 112
	ret	0
@serpent_lt@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_gen_w@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_gen_w@8
_TEXT	SEGMENT
@serpent_gen_w@8 PROC					; COMDAT
; _b$ = ecx
; _i$ = edx
; Line 119
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, DWORD PTR [ecx+20]
	xor	eax, DWORD PTR [ecx+12]
	xor	eax, DWORD PTR [ecx]
	xor	eax, edx
	xor	eax, -1640531527			; 9e3779b9H
; Line 120
	rol	eax, 11					; 0000000bH
; Line 121
	ret	0
@serpent_gen_w@8 ENDP
_TEXT	ENDS
PUBLIC	@sbox128@12
; Function compile flags: /Ogsp
;	COMDAT @sbox128@12
_TEXT	SEGMENT
_tmp_blk$ = -32						; size = 16
_sb$ = -16						; size = 16
_type$ = 8						; size = 4
@sbox128@12 PROC					; COMDAT
; _blk$ = ecx
; _box_idx$ = dl
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
; Line 131
	movzx	esi, dl
	push	edi
	and	esi, 7
; Line 133
	push	8
	lea	esi, DWORD PTR _sbox[esi*8]
; Line 135
	lea	edx, DWORD PTR _sb$[ebp+1]
	pop	edi
$LL6@:
	mov	al, BYTE PTR [esi]
	mov	bl, al
	shr	bl, 4
; Line 136
	and	al, 15					; 0000000fH
	mov	BYTE PTR [edx-1], bl
	mov	BYTE PTR [edx], al
	inc	esi
	add	edx, 2
	dec	edi
	jne	SHORT $LL6@
; Line 139
	lea	edx, DWORD PTR _tmp_blk$[ebp]
	call	@serpent_ip@8
	push	16					; 00000010H
	lea	edx, DWORD PTR _tmp_blk$[ebp]
	pop	esi
$LL3@:
; Line 143
	movzx	eax, BYTE PTR [edx]
	mov	edi, eax
	shr	edi, 4
	mov	bl, BYTE PTR _sb$[ebp+edi]
	shl	bl, 4
	and	eax, 15					; 0000000fH
	or	bl, BYTE PTR _sb$[ebp+eax]
	mov	BYTE PTR [edx], bl
	inc	edx
	dec	esi
	jne	SHORT $LL3@
; Line 145
	mov	edx, ecx
	lea	ecx, DWORD PTR _tmp_blk$[ebp]
	call	@serpent_fp@8
	pop	edi
	pop	esi
	pop	ebx
; Line 146
	leave
	ret	4
@sbox128@12 ENDP
_TEXT	ENDS
PUBLIC	@serpent_setkey@12
; Function compile flags: /Ogsp
;	COMDAT @serpent_setkey@12
_TEXT	SEGMENT
_x$ = -36						; size = 32
_key$ = -4						; size = 4
tv407 = 8						; size = 4
_inlen$ = 8						; size = 4
@serpent_setkey@12 PROC					; COMDAT
; _key$ = ecx
; _input$ = edx
; Line 149
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _key$[ebp], ecx
; Line 158
	push	8
	xor	eax, eax
	pop	ecx
	lea	edi, DWORD PTR _x$[ebp]
	rep stosd
; Line 161
	mov	eax, DWORD PTR _inlen$[ebp]
	mov	cl, 32					; 00000020H
	cmp	eax, 32					; 00000020H
	ja	SHORT $LN17@
	mov	cl, al
$LN17@:
; Line 163
	movzx	ecx, cl
	lea	edi, DWORD PTR _x$[ebp]
	mov	esi, edx
	rep movsb
; Line 173
	cmp	eax, 32					; 00000020H
	jae	SHORT $LN10@
; Line 174
	lea	eax, DWORD PTR _x$[ebp+eax]
	or	BYTE PTR [eax], 1
$LN10@:
; Line 177
	mov	eax, DWORD PTR _key$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv407[ebp], 33		; 00000021H
$LL9@:
; Line 178
	push	4
	pop	ebx
$LL6@:
; Line 179
	mov	ecx, edx
	xor	ecx, DWORD PTR _x$[ebp]
; Line 185
	push	7
	xor	ecx, DWORD PTR _x$[ebp+20]
	lea	esi, DWORD PTR _x$[ebp+4]
	xor	ecx, DWORD PTR _x$[ebp+12]
	lea	edi, DWORD PTR _x$[ebp]
	xor	ecx, DWORD PTR _x$[ebp+28]
	xor	ecx, -1640531527			; 9e3779b9H
	rol	ecx, 11					; 0000000bH
	mov	DWORD PTR [eax], ecx
	pop	ecx
	rep movsd
; Line 187
	mov	ecx, DWORD PTR [eax]
	add	eax, 4
	inc	edx
	dec	ebx
	mov	DWORD PTR _x$[ebp+28], ecx
	jne	SHORT $LL6@
; Line 177
	dec	DWORD PTR tv407[ebp]
	jne	SHORT $LL9@
; Line 190
	mov	esi, DWORD PTR _key$[ebp]
	xor	bl, bl
$LL3@:
; Line 191
	mov	dl, 3
	push	0
	sub	dl, bl
	mov	ecx, esi
	call	@sbox128@12
	inc	bl
	add	esi, 16					; 00000010H
	cmp	bl, 32					; 00000020H
	jbe	SHORT $LL3@
	pop	edi
	pop	esi
	pop	ebx
; Line 193
	leave
	ret	4
@serpent_setkey@12 ENDP
_TEXT	ENDS
PUBLIC	@serpent_enc@12
; Function compile flags: /Ogsp
;	COMDAT @serpent_enc@12
_TEXT	SEGMENT
_ct$ = 8						; size = 4
@serpent_enc@12 PROC					; COMDAT
; _key$ = ecx
; _pt$ = edx
; Line 196
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 202
	mov	esi, DWORD PTR _ct$[ebp]
	push	edi
	mov	edi, ecx
	mov	ecx, esi
	call	@blkcpy@8
; Line 204
	xor	bl, bl
$LL5@:
; Line 206
	movzx	edx, bl
	shl	edx, 4
	add	edx, edi
	mov	ecx, esi
	call	@blkxor@8
; Line 208
	push	0
	mov	dl, bl
	mov	ecx, esi
	call	@sbox128@12
; Line 211
	mov	ecx, esi
	cmp	bl, 31					; 0000001fH
	jne	SHORT $LN2@
	lea	edx, DWORD PTR [edi+512]
	call	@blkxor@8
; Line 212
	jmp	SHORT $LN4@
$LN2@:
; Line 214
	xor	edx, edx
	call	@serpent_lt@8
$LN4@:
; Line 204
	inc	bl
	cmp	bl, 32					; 00000020H
	jb	SHORT $LL5@
	pop	edi
	pop	esi
	pop	ebx
; Line 217
	pop	ebp
	ret	4
@serpent_enc@12 ENDP
_TEXT	ENDS
END
