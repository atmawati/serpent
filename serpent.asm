; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	c:\github\serpent\serpent.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sbox
PUBLIC	_sbox_inv
_DATA	SEGMENT
_sbox	DB	038H
	DB	0f1H
	DB	0a6H
	DB	05bH
	DB	0edH
	DB	042H
	DB	070H
	DB	09cH
	DB	0fcH
	DB	027H
	DB	090H
	DB	05aH
	DB	01bH
	DB	0e8H
	DB	06dH
	DB	034H
	DB	086H
	DB	079H
	DB	03cH
	DB	0afH
	DB	0d1H
	DB	0e4H
	DB	0bH
	DB	052H
	DB	0fH
	DB	0b8H
	DB	0c9H
	DB	063H
	DB	0d1H
	DB	024H
	DB	0a7H
	DB	05eH
	DB	01fH
	DB	083H
	DB	0c0H
	DB	0b6H
	DB	025H
	DB	04aH
	DB	09eH
	DB	07dH
	DB	0f5H
	DB	02bH
	DB	04aH
	DB	09cH
	DB	03H
	DB	0e8H
	DB	0d6H
	DB	071H
	DB	072H
	DB	0c5H
	DB	084H
	DB	06bH
	DB	0e9H
	DB	01fH
	DB	0d3H
	DB	0a0H
	DB	01dH
	DB	0f0H
	DB	0e8H
	DB	02bH
	DB	074H
	DB	0caH
	DB	093H
	DB	056H
_sbox_inv DB	0d3H
	DB	0b0H
	DB	0a6H
	DB	05cH
	DB	01eH
	DB	047H
	DB	0f9H
	DB	082H
	DB	058H
	DB	02eH
	DB	0f6H
	DB	0c3H
	DB	0b4H
	DB	079H
	DB	01dH
	DB	0a0H
	DB	0c9H
	DB	0f4H
	DB	0beH
	DB	012H
	DB	03H
	DB	06dH
	DB	058H
	DB	0a7H
	DB	09H
	DB	0a7H
	DB	0beH
	DB	06dH
	DB	035H
	DB	0c2H
	DB	048H
	DB	0f1H
	DB	050H
	DB	083H
	DB	0a9H
	DB	07eH
	DB	02cH
	DB	0b6H
	DB	04fH
	DB	0d1H
	DB	08fH
	DB	029H
	DB	041H
	DB	0deH
	DB	0b6H
	DB	053H
	DB	07cH
	DB	0a0H
	DB	0faH
	DB	01dH
	DB	053H
	DB	060H
	DB	049H
	DB	0e7H
	DB	02cH
	DB	08bH
	DB	030H
	DB	06dH
	DB	09eH
	DB	0f8H
	DB	05cH
	DB	0b7H
	DB	0a1H
	DB	042H
_DATA	ENDS
PUBLIC	_blkxor
; Function compile flags: /Ogspy
;	COMDAT _blkxor
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_blkxor	PROC						; COMDAT
; File c:\github\serpent\serpent.c
; Line 15
	mov	eax, DWORD PTR _dst$[esp-4]
	mov	ecx, DWORD PTR _src$[esp-4]
	push	4
	pop	edx
	sub	ecx, eax
	push	esi
$LL3@blkxor:
; Line 16
	mov	esi, DWORD PTR [ecx+eax]
	xor	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $LL3@blkxor
	pop	esi
; Line 18
	ret	0
_blkxor	ENDP
_TEXT	ENDS
PUBLIC	_blkcpy
; Function compile flags: /Ogspy
;	COMDAT _blkcpy
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_blkcpy	PROC						; COMDAT
; Line 24
	mov	eax, DWORD PTR _dst$[esp-4]
	mov	ecx, DWORD PTR _src$[esp-4]
	push	4
	pop	edx
	sub	ecx, eax
	push	esi
$LL3@blkcpy:
; Line 25
	mov	esi, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $LL3@blkcpy
	pop	esi
; Line 27
	ret	0
_blkcpy	ENDP
_TEXT	ENDS
PUBLIC	_blkclr
; Function compile flags: /Ogspy
;	COMDAT _blkclr
_TEXT	SEGMENT
_blk$ = 8						; size = 4
_blkclr	PROC						; COMDAT
; Line 30
	push	edi
; Line 34
	mov	edi, DWORD PTR _blk$[esp]
	xor	eax, eax
	stosd
	stosd
	stosd
	stosd
	pop	edi
; Line 36
	ret	0
_blkclr	ENDP
_TEXT	ENDS
PUBLIC	_serpent_ip
; Function compile flags: /Ogspy
;	COMDAT _serpent_ip
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_serpent_ip PROC					; COMDAT
; Line 68
	mov	edx, DWORD PTR _out$[esp-4]
	push	ebx
	push	esi
	push	edi
	xor	eax, eax
	mov	edi, edx
	stosd
	stosd
	stosd
; Line 70
	push	16					; 00000010H
	stosd
	pop	ebx
$LL6@serpent_ip:
; Line 71
	push	8
	xor	esi, esi
	pop	edi
$LL3@serpent_ip:
; Line 72
	mov	eax, esi
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN20@serpent_ip
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN20@serpent_ip:
	mov	ecx, DWORD PTR _in$[esp+8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	cl, BYTE PTR [eax]
	shr	DWORD PTR [eax], 1
	and	cl, 1
; Line 73
	mov	cl, BYTE PTR [edx]
	sete	al
	dec	al
	and	al, 128					; 00000080H
	shr	cl, 1
	or	al, cl
	inc	esi
	dec	edi
	mov	BYTE PTR [edx], al
	jne	SHORT $LL3@serpent_ip
; Line 70
	inc	edx
	dec	ebx
	jne	SHORT $LL6@serpent_ip
; Line 76
	pop	edi
	pop	esi
	pop	ebx
	ret	0
_serpent_ip ENDP
_TEXT	ENDS
PUBLIC	_serpent_fp
; Function compile flags: /Ogspy
;	COMDAT _serpent_fp
_TEXT	SEGMENT
tv286 = -8						; size = 4
tv158 = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_serpent_fp PROC					; COMDAT
; Line 82
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 86
	mov	esi, DWORD PTR _out$[ebp]
	push	edi
	xor	eax, eax
	mov	edi, esi
	stosd
	stosd
	stosd
	stosd
; Line 88
	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR tv286[ebp], 4
$LL6@serpent_fp:
; Line 89
	xor	edi, edi
	mov	DWORD PTR tv158[ebp], 32		; 00000020H
$LL3@serpent_fp:
; Line 90
	mov	cl, BYTE PTR [eax]
	shr	DWORD PTR [eax], 1
; Line 91
	mov	edx, edi
	and	cl, 1
	and	edx, -2147483645			; 80000003H
	jns	SHORT $LN20@serpent_fp
	dec	edx
	or	edx, -4					; fffffffcH
	inc	edx
$LN20@serpent_fp:
	movzx	ecx, cl
	neg	ecx
	sbb	ecx, ecx
	lea	edx, DWORD PTR [esi+edx*4]
	mov	ebx, DWORD PTR [edx]
	and	ecx, -2147483648			; 80000000H
	shr	ebx, 1
	or	ecx, ebx
	inc	edi
	dec	DWORD PTR tv158[ebp]
	mov	DWORD PTR [edx], ecx
	jne	SHORT $LL3@serpent_fp
; Line 88
	add	eax, 4
	dec	DWORD PTR tv286[ebp]
	jne	SHORT $LL6@serpent_fp
	pop	edi
	pop	esi
	pop	ebx
; Line 94
	leave
	ret	0
_serpent_fp ENDP
_TEXT	ENDS
PUBLIC	_serpent_lt
; Function compile flags: /Ogspy
;	COMDAT _serpent_lt
_TEXT	SEGMENT
_x1$ = -8						; size = 4
_x3$ = -4						; size = 4
_x$ = 8							; size = 4
_type$ = 12						; size = 4
_serpent_lt PROC					; COMDAT
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 108
	cmp	DWORD PTR _type$[ebp], 0
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _x1$[ebp], esi
	mov	DWORD PTR _x3$[ebp], eax
	jne	SHORT $LN2@serpent_lt
; Line 109
	rol	ecx, 13					; 0000000dH
; Line 110
	rol	edi, 3
; Line 111
	mov	ebx, edi
	xor	ebx, esi
; Line 112
	mov	esi, ecx
	shl	esi, 3
	xor	esi, eax
	xor	ebx, ecx
; Line 113
	rol	ebx, 1
	xor	esi, edi
; Line 114
	rol	esi, 7
; Line 116
	mov	edx, ebx
	shl	edx, 7
	mov	eax, esi
	xor	eax, ebx
	xor	edx, esi
	xor	eax, ecx
	xor	edx, edi
; Line 117
	rol	eax, 5
; Line 118
	ror	edx, 10					; 0000000aH
; Line 119
	jmp	SHORT $LN1@serpent_lt
$LN2@serpent_lt:
; Line 125
	mov	ebx, DWORD PTR _x1$[ebp]
	mov	edx, esi
	shl	edx, 7
	rol	edi, 10					; 0000000aH
	xor	edx, edi
	xor	edx, eax
	ror	ecx, 5
	xor	eax, ecx
	xor	eax, esi
	mov	esi, DWORD PTR _x3$[ebp]
	ror	esi, 7
; Line 126
	mov	ecx, eax
	shl	ecx, 3
	xor	esi, ecx
	xor	esi, edx
	ror	ebx, 1
; Line 127
	xor	ebx, edx
	xor	ebx, eax
; Line 128
	ror	edx, 3
; Line 129
	ror	eax, 13					; 0000000dH
$LN1@serpent_lt:
; Line 132
	mov	ecx, DWORD PTR _x$[ebp]
	pop	edi
; Line 135
	mov	DWORD PTR [ecx+12], esi
	pop	esi
	mov	DWORD PTR [ecx+4], ebx
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+8], edx
	pop	ebx
; Line 136
	leave
	ret	0
_serpent_lt ENDP
_TEXT	ENDS
PUBLIC	_serpent_gen_w
; Function compile flags: /Ogspy
;	COMDAT _serpent_gen_w
_TEXT	SEGMENT
_b$ = 8							; size = 4
_i$ = 12						; size = 4
_serpent_gen_w PROC					; COMDAT
; Line 140
	mov	ecx, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, DWORD PTR [ecx+20]
	xor	eax, DWORD PTR [ecx+12]
	xor	eax, DWORD PTR [ecx]
	xor	eax, DWORD PTR _i$[esp-4]
	xor	eax, -1640531527			; 9e3779b9H
; Line 141
	rol	eax, 11					; 0000000bH
; Line 142
	ret	0
_serpent_gen_w ENDP
_TEXT	ENDS
PUBLIC	_sbox128
; Function compile flags: /Ogspy
;	COMDAT _sbox128
_TEXT	SEGMENT
_tmp_blk$ = -16						; size = 16
_sb$ = -16						; size = 16
_blk$ = 8						; size = 4
_box_idx$ = 12						; size = 1
_type$ = 16						; size = 4
_sbox128 PROC						; COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
; Line 150
	and	BYTE PTR _box_idx$[ebp], 7
	sub	esp, 16					; 00000010H
; Line 152
	cmp	DWORD PTR _type$[ebp], 0
	push	esi
; Line 153
	movzx	esi, BYTE PTR _box_idx$[ebp]
	push	edi
	jne	SHORT $LN8@sbox128
	lea	esi, DWORD PTR _sbox[esi*8]
; Line 154
	jmp	SHORT $LN7@sbox128
$LN8@sbox128:
; Line 155
	lea	esi, DWORD PTR _sbox_inv[esi*8]
$LN7@sbox128:
; Line 158
	push	8
	pop	edx
	mov	edi, esi
	lea	ecx, DWORD PTR _sb$[ebp+1]
	push	ebx
$LL6@sbox128:
; Line 159
	mov	al, BYTE PTR [edi]
; Line 160
	mov	bl, al
	shr	bl, 4
; Line 161
	and	al, 15					; 0000000fH
	mov	BYTE PTR [ecx-1], bl
	mov	BYTE PTR [ecx], al
	inc	edi
	add	ecx, 2
	dec	edx
	jne	SHORT $LL6@sbox128
; Line 164
	lea	eax, DWORD PTR _tmp_blk$[ebp]
	push	eax
	push	DWORD PTR _blk$[ebp]
	call	_serpent_ip
	pop	ecx
	pop	ecx
	push	16					; 00000010H
	pop	edi
	lea	ecx, DWORD PTR _tmp_blk$[ebp]
	pop	ebx
$LL3@sbox128:
; Line 167
	movzx	eax, BYTE PTR [ecx]
; Line 168
	mov	edx, eax
	shr	edx, 4
; Line 169
	mov	dl, BYTE PTR [edx+esi]
	shl	dl, 4
; Line 170
	and	eax, 15					; 0000000fH
	or	dl, BYTE PTR [eax+esi]
; Line 171
	mov	BYTE PTR [ecx], dl
	inc	ecx
	dec	edi
	jne	SHORT $LL3@sbox128
; Line 173
	push	DWORD PTR _blk$[ebp]
	lea	eax, DWORD PTR _tmp_blk$[ebp]
	push	eax
	call	_serpent_fp
	pop	ecx
	pop	ecx
	pop	edi
	pop	esi
; Line 174
	leave
	ret	0
_sbox128 ENDP
_TEXT	ENDS
PUBLIC	_serpent_setkey
;EXTRN	_memmove:PROC
;EXTRN	_memcpy:PROC
;EXTRN	_memset:PROC
; Function compile flags: /Ogspy
;	COMDAT _serpent_setkey
_TEXT	SEGMENT
_x$ = -32						; size = 32
_key$ = 8						; size = 4
_input$ = 12						; size = 4
tv334 = 16						; size = 4
_inlen$ = 16						; size = 4
_serpent_setkey PROC					; COMDAT
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
; Line 185
	push	32					; 00000020H
	xor	edi, edi
	lea	eax, DWORD PTR _x$[ebp]
	push	edi
	push	eax
	;call	_memset
; Line 186
	mov	esi, DWORD PTR _inlen$[ebp]
	push	esi
	push	DWORD PTR _input$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	;call	_memcpy
	add	esp, 24					; 00000018H
; Line 189
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN10@serpent_se
; Line 190
	lea	eax, DWORD PTR _x$[ebp+esi]
	or	BYTE PTR [eax], 1
$LN10@serpent_se:
; Line 193
	mov	esi, DWORD PTR _key$[ebp]
	mov	DWORD PTR tv334[ebp], 33		; 00000021H
$LL9@serpent_se:
; Line 194
	push	4
	pop	ebx
$LL6@serpent_se:
; Line 195
	lea	eax, DWORD PTR _x$[ebp]
	push	edi
	push	eax
	call	_serpent_gen_w
	mov	DWORD PTR [esi], eax
; Line 198
	push	28					; 0000001cH
	lea	eax, DWORD PTR _x$[ebp+4]
	push	eax
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	;call	_memmove
; Line 199
	mov	eax, DWORD PTR [esi]
	add	esp, 20					; 00000014H
	add	esi, 4
	inc	edi
	dec	ebx
	mov	DWORD PTR _x$[ebp+28], eax
	jne	SHORT $LL6@serpent_se
; Line 193
	dec	DWORD PTR tv334[ebp]
	jne	SHORT $LL9@serpent_se
; Line 202
	mov	esi, DWORD PTR _key$[ebp]
	xor	bl, bl
$LL3@serpent_se:
; Line 203
	mov	al, 3
	sub	al, bl
	movzx	eax, al
	push	0
	push	eax
	push	esi
	call	_sbox128
	add	esp, 12					; 0000000cH
	inc	bl
	add	esi, 16					; 00000010H
	cmp	bl, 32					; 00000020H
	jbe	SHORT $LL3@serpent_se
	pop	edi
	pop	esi
	pop	ebx
; Line 205
	leave
	ret	0
_serpent_setkey ENDP
_TEXT	ENDS
PUBLIC	_serpent_enc
; Function compile flags: /Ogspy
;	COMDAT _serpent_enc
_TEXT	SEGMENT
_key$ = 8						; size = 4
_i$ = 12						; size = 1
_pt$ = 12						; size = 4
_ct$ = 16						; size = 4
_serpent_enc PROC					; COMDAT
; Line 208
	push	ebp
	mov	ebp, esp
	push	esi
; Line 214
	mov	esi, DWORD PTR _ct$[ebp]
	push	edi
	push	DWORD PTR _pt$[ebp]
	push	esi
	call	_blkcpy
; Line 216
	mov	edi, DWORD PTR _key$[ebp]
	pop	ecx
	pop	ecx
	mov	BYTE PTR _i$[ebp], 0
$LL5@serpent_en:
; Line 218
	movzx	eax, BYTE PTR _i$[ebp]
	shl	eax, 4
	add	eax, edi
	push	eax
	push	esi
	call	_blkxor
; Line 220
	push	0
	push	DWORD PTR _i$[ebp]
	push	esi
	call	_sbox128
	add	esp, 20					; 00000014H
; Line 222
	cmp	BYTE PTR _i$[ebp], 31			; 0000001fH
	jne	SHORT $LN2@serpent_en
; Line 223
	lea	eax, DWORD PTR [edi+512]
	push	eax
	push	esi
	call	_blkxor
; Line 224
	jmp	SHORT $LN10@serpent_en
$LN2@serpent_en:
; Line 226
	push	0
	push	esi
	call	_serpent_lt
$LN10@serpent_en:
; Line 216
	inc	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], 32			; 00000020H
; Line 226
	pop	ecx
	pop	ecx
	jb	SHORT $LL5@serpent_en
	pop	edi
	pop	esi
; Line 229
	pop	ebp
	ret	0
_serpent_enc ENDP
_TEXT	ENDS
PUBLIC	_serpent_dec
; Function compile flags: /Ogspy
;	COMDAT _serpent_dec
_TEXT	SEGMENT
_key$ = 8						; size = 4
_i$ = 12						; size = 1
_ct$ = 12						; size = 4
_pt$ = 16						; size = 4
_serpent_dec PROC					; COMDAT
; Line 232
	push	ebp
	mov	ebp, esp
	push	esi
; Line 238
	mov	esi, DWORD PTR _pt$[ebp]
	push	edi
	push	DWORD PTR _ct$[ebp]
	push	esi
	call	_blkcpy
; Line 240
	mov	edi, DWORD PTR _key$[ebp]
	pop	ecx
	pop	ecx
	mov	BYTE PTR _i$[ebp], 31			; 0000001fH
$LL5@serpent_de:
; Line 241
	cmp	BYTE PTR _i$[ebp], 31			; 0000001fH
	jne	SHORT $LN2@serpent_de
; Line 243
	lea	eax, DWORD PTR [edi+512]
	push	eax
	push	esi
	call	_blkxor
; Line 244
	jmp	SHORT $LN10@serpent_de
$LN2@serpent_de:
; Line 245
	push	1
	push	esi
	call	_serpent_lt
$LN10@serpent_de:
	pop	ecx
	pop	ecx
; Line 248
	push	1
	push	DWORD PTR _i$[ebp]
	push	esi
	call	_sbox128
; Line 250
	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 4
	add	eax, edi
	push	eax
	push	esi
	call	_blkxor
	add	esp, 20					; 00000014H
	dec	BYTE PTR _i$[ebp]
	jns	SHORT $LL5@serpent_de
	pop	edi
	pop	esi
; Line 252
	pop	ebp
	ret	0
_serpent_dec ENDP
_TEXT	ENDS
END
