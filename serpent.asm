; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	sbox
PUBLIC	sbox_inv
_DATA	SEGMENT
sbox	DB	038H
	DB	0f1H
	DB	0a6H
	DB	05bH
	DB	0edH
	DB	042H
	DB	070H
	DB	09cH
	DB	0fcH
	DB	027H
	DB	090H
	DB	05aH
	DB	01bH
	DB	0e8H
	DB	06dH
	DB	034H
	DB	086H
	DB	079H
	DB	03cH
	DB	0afH
	DB	0d1H
	DB	0e4H
	DB	0bH
	DB	052H
	DB	0fH
	DB	0b8H
	DB	0c9H
	DB	063H
	DB	0d1H
	DB	024H
	DB	0a7H
	DB	05eH
	DB	01fH
	DB	083H
	DB	0c0H
	DB	0b6H
	DB	025H
	DB	04aH
	DB	09eH
	DB	07dH
	DB	0f5H
	DB	02bH
	DB	04aH
	DB	09cH
	DB	03H
	DB	0e8H
	DB	0d6H
	DB	071H
	DB	072H
	DB	0c5H
	DB	084H
	DB	06bH
	DB	0e9H
	DB	01fH
	DB	0d3H
	DB	0a0H
	DB	01dH
	DB	0f0H
	DB	0e8H
	DB	02bH
	DB	074H
	DB	0caH
	DB	093H
	DB	056H
sbox_inv DB	0d3H
	DB	0b0H
	DB	0a6H
	DB	05cH
	DB	01eH
	DB	047H
	DB	0f9H
	DB	082H
	DB	058H
	DB	02eH
	DB	0f6H
	DB	0c3H
	DB	0b4H
	DB	079H
	DB	01dH
	DB	0a0H
	DB	0c9H
	DB	0f4H
	DB	0beH
	DB	012H
	DB	03H
	DB	06dH
	DB	058H
	DB	0a7H
	DB	09H
	DB	0a7H
	DB	0beH
	DB	06dH
	DB	035H
	DB	0c2H
	DB	048H
	DB	0f1H
	DB	050H
	DB	083H
	DB	0a9H
	DB	07eH
	DB	02cH
	DB	0b6H
	DB	04fH
	DB	0d1H
	DB	08fH
	DB	029H
	DB	041H
	DB	0deH
	DB	0b6H
	DB	053H
	DB	07cH
	DB	0a0H
	DB	0faH
	DB	01dH
	DB	053H
	DB	060H
	DB	049H
	DB	0e7H
	DB	02cH
	DB	08bH
	DB	030H
	DB	06dH
	DB	09eH
	DB	0f8H
	DB	05cH
	DB	0b7H
	DB	0a1H
	DB	042H
_DATA	ENDS
PUBLIC	blkxor
; Function compile flags: /Ogspy
;	COMDAT blkxor
_TEXT	SEGMENT
dst$ = 8
src$ = 16
blkxor	PROC						; COMDAT
; File c:\github\serpent\serpent.c
; Line 15
	sub	rdx, rcx
	mov	r8d, 4
$LL3@blkxor:
; Line 16
	mov	eax, DWORD PTR [rdx+rcx]
	xor	DWORD PTR [rcx], eax
	add	rcx, 4
	dec	r8
	jne	SHORT $LL3@blkxor
; Line 18
	fatret	0
blkxor	ENDP
_TEXT	ENDS
PUBLIC	blkcpy
; Function compile flags: /Ogspy
;	COMDAT blkcpy
_TEXT	SEGMENT
dst$ = 8
src$ = 16
blkcpy	PROC						; COMDAT
; Line 24
	sub	rdx, rcx
	mov	r8d, 4
$LL3@blkcpy:
; Line 25
	mov	eax, DWORD PTR [rdx+rcx]
	mov	DWORD PTR [rcx], eax
	add	rcx, 4
	dec	r8
	jne	SHORT $LL3@blkcpy
; Line 27
	fatret	0
blkcpy	ENDP
_TEXT	ENDS
PUBLIC	blkclr
; Function compile flags: /Ogspy
;	COMDAT blkclr
_TEXT	SEGMENT
blk$ = 8
blkclr	PROC						; COMDAT
; Line 34
	and	QWORD PTR [rcx], 0
	and	QWORD PTR [rcx+8], 0
; Line 36
	ret	0
blkclr	ENDP
_TEXT	ENDS
PUBLIC	serpent_ip
; Function compile flags: /Ogspy
;	COMDAT serpent_ip
_TEXT	SEGMENT
in$ = 8
out$ = 16
serpent_ip PROC						; COMDAT
; Line 68
	and	QWORD PTR [rdx], 0
	and	QWORD PTR [rdx+8], 0
	mov	r8, rdx
	mov	r11, rcx
; Line 70
	mov	r9d, 16
$LL6@serpent_ip:
; Line 71
	xor	r10b, r10b
$LL3@serpent_ip:
; Line 72
	movzx	eax, r10b
	and	eax, -2147483645			; ffffffff80000003H
	jge	SHORT $LN20@serpent_ip
	dec	eax
	or	eax, -4
	inc	eax
$LN20@serpent_ip:
	cdqe
	mov	cl, BYTE PTR [r11+rax*4]
	shr	DWORD PTR [r11+rax*4], 1
; Line 73
	mov	al, BYTE PTR [r8]
	and	cl, 1
	neg	cl
	sbb	dl, dl
	shr	al, 1
	inc	r10b
	and	dl, 128					; 00000080H
	or	dl, al
	mov	BYTE PTR [r8], dl
	cmp	r10b, 8
	jb	SHORT $LL3@serpent_ip
; Line 70
	inc	r8
	dec	r9
	jne	SHORT $LL6@serpent_ip
; Line 76
	fatret	0
serpent_ip ENDP
_TEXT	ENDS
PUBLIC	serpent_fp
; Function compile flags: /Ogspy
;	COMDAT serpent_fp
_TEXT	SEGMENT
in$ = 8
out$ = 16
serpent_fp PROC						; COMDAT
; Line 86
	and	QWORD PTR [rdx], 0
	and	QWORD PTR [rdx+8], 0
	mov	r11, rdx
	mov	r8, rcx
; Line 88
	mov	r9d, 4
$LL6@serpent_fp:
; Line 89
	xor	r10b, r10b
$LL3@serpent_fp:
; Line 90
	mov	cl, BYTE PTR [r8]
	shr	DWORD PTR [r8], 1
; Line 91
	movzx	eax, r10b
	and	cl, 1
	and	eax, -2147483645			; ffffffff80000003H
	jge	SHORT $LN20@serpent_fp
	dec	eax
	or	eax, -4
	inc	eax
$LN20@serpent_fp:
	neg	cl
	movsxd	rdx, eax
	mov	eax, DWORD PTR [r11+rdx*4]
	sbb	ecx, ecx
	inc	r10b
	shr	eax, 1
	and	ecx, -2147483648			; 80000000H
	or	ecx, eax
	mov	DWORD PTR [r11+rdx*4], ecx
	cmp	r10b, 32				; 00000020H
	jb	SHORT $LL3@serpent_fp
; Line 88
	add	r8, 4
	dec	r9
	jne	SHORT $LL6@serpent_fp
; Line 94
	fatret	0
serpent_fp ENDP
_TEXT	ENDS
PUBLIC	serpent_lt
; Function compile flags: /Ogspy
;	COMDAT serpent_lt
_TEXT	SEGMENT
x$ = 8
type$ = 16
serpent_lt PROC						; COMDAT
; Line 103
	mov	r10d, DWORD PTR [rcx]
; Line 105
	mov	r11d, DWORD PTR [rcx+8]
; Line 108
	test	edx, edx
	jne	SHORT $LN2@serpent_lt
; Line 109
	rol	r10d, 13
; Line 110
	rol	r11d, 3
; Line 112
	mov	r8d, r10d
	mov	eax, r11d
	xor	eax, DWORD PTR [rcx+4]
	shl	r8d, 3
	xor	r8d, DWORD PTR [rcx+12]
	xor	eax, r10d
; Line 113
	rol	eax, 1
	xor	r8d, r11d
; Line 114
	rol	r8d, 7
; Line 116
	mov	edx, eax
	shl	edx, 7
	mov	r9d, r8d
	xor	r9d, eax
	xor	edx, r8d
	xor	r9d, r10d
	xor	edx, r11d
; Line 117
	rol	r9d, 5
; Line 118
	ror	edx, 10
; Line 119
	jmp	SHORT $LN1@serpent_lt
$LN2@serpent_lt:
; Line 122
	mov	eax, DWORD PTR [rcx+4]
; Line 124
	mov	r8d, DWORD PTR [rcx+12]
	mov	edx, r11d
	shl	eax, 7
	rol	edx, 10
	mov	r9d, r10d
	xor	edx, eax
	xor	edx, DWORD PTR [rcx+12]
	ror	r9d, 5
	xor	r9d, DWORD PTR [rcx+12]
	xor	r9d, DWORD PTR [rcx+4]
	ror	r8d, 7
; Line 126
	mov	eax, r9d
	shl	eax, 3
	xor	r8d, eax
	mov	eax, DWORD PTR [rcx+4]
	xor	r8d, edx
	ror	eax, 1
; Line 127
	xor	eax, edx
	xor	eax, r9d
; Line 128
	ror	edx, 3
; Line 129
	ror	r9d, 13
$LN1@serpent_lt:
; Line 132
	mov	DWORD PTR [rcx], r9d
; Line 133
	mov	DWORD PTR [rcx+4], eax
; Line 134
	mov	DWORD PTR [rcx+8], edx
; Line 135
	mov	DWORD PTR [rcx+12], r8d
; Line 136
	ret	0
serpent_lt ENDP
_TEXT	ENDS
PUBLIC	serpent_gen_w
; Function compile flags: /Ogspy
;	COMDAT serpent_gen_w
_TEXT	SEGMENT
b$ = 8
i$ = 16
serpent_gen_w PROC					; COMDAT
; Line 140
	mov	eax, DWORD PTR [rcx+28]
	xor	eax, DWORD PTR [rcx+20]
	xor	eax, DWORD PTR [rcx+12]
	xor	eax, DWORD PTR [rcx]
	xor	eax, edx
	xor	eax, -1640531527			; 9e3779b9H
; Line 141
	rol	eax, 11
; Line 142
	ret	0
serpent_gen_w ENDP
_TEXT	ENDS
PUBLIC	sbox128
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$sbox128 DD imagerel $LN15
	DD	imagerel $LN15+160
	DD	imagerel $unwind$sbox128
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sbox128 DD 020601H
	DD	030027206H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT sbox128
_TEXT	SEGMENT
sb$ = 32
tmp_blk$ = 48
blk$ = 80
box_idx$ = 88
type$ = 96
sbox128	PROC						; COMDAT
; Line 145
$LN15:
	push	rbx
	sub	rsp, 64					; 00000040H
; Line 150
	and	dl, 7
; Line 152
	test	r8d, r8d
	mov	rbx, rcx
; Line 153
	movzx	eax, dl
	lea	rdx, OFFSET FLAT:__ImageBase
	lea	r8, QWORD PTR sbox[rdx+rax*8]
	je	SHORT $LN7@sbox128
; Line 155
	lea	r8, QWORD PTR sbox_inv[rdx+rax*8]
$LN7@sbox128:
; Line 158
	lea	rdx, QWORD PTR sb$[rsp+1]
	mov	r9d, 8
$LL6@sbox128:
; Line 159
	mov	cl, BYTE PTR [r8]
	inc	r8
; Line 160
	mov	al, cl
; Line 161
	and	cl, 15
	shr	al, 4
	mov	BYTE PTR [rdx], cl
	add	rdx, 2
	dec	r9
	mov	BYTE PTR [rdx-3], al
	jne	SHORT $LL6@sbox128
; Line 164
	lea	rdx, QWORD PTR tmp_blk$[rsp]
	mov	rcx, rbx
	call	serpent_ip
	lea	r11, QWORD PTR tmp_blk$[rsp]
	mov	r8d, 16
$LL3@sbox128:
; Line 167
	movzx	edx, BYTE PTR [r11]
; Line 168
	mov	eax, edx
; Line 170
	and	edx, 15
	shr	rax, 4
	mov	cl, BYTE PTR sb$[rsp+rax]
	shl	cl, 4
	or	cl, BYTE PTR sb$[rsp+rdx]
; Line 171
	mov	BYTE PTR [r11], cl
	inc	r11
	dec	r8
	jne	SHORT $LL3@sbox128
; Line 173
	lea	rcx, QWORD PTR tmp_blk$[rsp]
	mov	rdx, rbx
	call	serpent_fp
; Line 174
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
sbox128	ENDP
_TEXT	ENDS
PUBLIC	serpent_setkey
EXTRN	memmove:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$serpent_setkey DD imagerel $LN21
	DD	imagerel $LN21+233
	DD	imagerel $unwind$serpent_setkey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$serpent_setkey DD 0a1801H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0d0147218H
	DD	07010c012H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT serpent_setkey
_TEXT	SEGMENT
x$ = 32
key$ = 96
input$ = 104
inlen$ = 112
serpent_setkey PROC					; COMDAT
; Line 177
$LN21:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 64					; 00000040H
	mov	rbx, rdx
; Line 185
	xor	edx, edx
	mov	edi, r8d
	mov	rsi, rcx
	lea	rcx, QWORD PTR [rax-56]
	lea	r8d, QWORD PTR [rdx+32]
	call	memset
; Line 186
	lea	rcx, QWORD PTR x$[rsp]
	mov	r8d, edi
	mov	rdx, rbx
	call	memcpy
; Line 189
	cmp	edi, 32					; 00000020H
	jae	SHORT $LN10@serpent_se
; Line 190
	or	BYTE PTR x$[rsp+rdi], 1
$LN10@serpent_se:
; Line 193
	mov	ecx, DWORD PTR x$[rsp+28]
	xor	bl, bl
	mov	rbp, rsi
	mov	dil, bl
$LL9@serpent_se:
	movzx	r12d, dil
; Line 194
	mov	r13b, bl
	shl	r12d, 2
$LL6@serpent_se:
; Line 195
	movzx	eax, r13b
; Line 198
	lea	rdx, QWORD PTR x$[rsp+4]
	mov	r8d, 28
	add	eax, r12d
	xor	eax, DWORD PTR x$[rsp]
	xor	eax, DWORD PTR x$[rsp+20]
	xor	eax, DWORD PTR x$[rsp+12]
	xor	eax, ecx
	lea	rcx, QWORD PTR x$[rsp]
	xor	eax, -1640531527			; 9e3779b9H
	rol	eax, 11
	mov	DWORD PTR [rbp], eax
	call	memmove
; Line 199
	mov	ecx, DWORD PTR [rbp]
	inc	r13b
	add	rbp, 4
	mov	DWORD PTR x$[rsp+28], ecx
	cmp	r13b, 4
	jb	SHORT $LL6@serpent_se
; Line 193
	inc	dil
	cmp	dil, 32					; 00000020H
	jbe	SHORT $LL9@serpent_se
$LL3@serpent_se:
; Line 203
	mov	edx, 3
	xor	r8d, r8d
	mov	rcx, rsi
	sub	dl, bl
	call	sbox128
	inc	bl
	add	rsi, 16
	cmp	bl, 32					; 00000020H
	jbe	SHORT $LL3@serpent_se
; Line 205
	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
serpent_setkey ENDP
_TEXT	ENDS
PUBLIC	serpent_enc
;	COMDAT pdata
pdata	SEGMENT
$pdata$serpent_enc DD imagerel $LN31
	DD	imagerel $LN31+175
	DD	imagerel $unwind$serpent_enc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$serpent_enc DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT serpent_enc
_TEXT	SEGMENT
key$ = 48
pt$ = 56
ct$ = 64
serpent_enc PROC					; COMDAT
; Line 208
$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 214
	mov	ebp, 4
	mov	rdi, r8
	mov	r9, r8
	sub	rdx, r8
	mov	rsi, rcx
	mov	r8d, ebp
$LL10@serpent_en:
	mov	eax, DWORD PTR [rdx+r9]
	mov	DWORD PTR [r9], eax
	add	r9, rbp
	dec	r8
	jne	SHORT $LL10@serpent_en
; Line 216
	xor	bl, bl
$LL5@serpent_en:
; Line 218
	movzx	r8d, bl
	mov	rcx, rdi
	mov	rdx, rbp
	shl	r8, 4
	sub	r8, rdi
	add	r8, rsi
$LL15@serpent_en:
	mov	eax, DWORD PTR [r8+rcx]
	xor	DWORD PTR [rcx], eax
	add	rcx, rbp
	dec	rdx
	jne	SHORT $LL15@serpent_en
; Line 220
	xor	r8d, r8d
	mov	dl, bl
	mov	rcx, rdi
	call	sbox128
; Line 223
	mov	rcx, rdi
	cmp	bl, 31
	jne	SHORT $LN2@serpent_en
	mov	rdx, rsi
	mov	r8, rbp
	sub	rdx, rdi
$LL20@serpent_en:
	mov	eax, DWORD PTR [rdx+rcx+512]
	xor	DWORD PTR [rcx], eax
	add	rcx, rbp
	dec	r8
	jne	SHORT $LL20@serpent_en
; Line 224
	jmp	SHORT $LN4@serpent_en
$LN2@serpent_en:
; Line 226
	xor	edx, edx
	call	serpent_lt
$LN4@serpent_en:
; Line 216
	inc	bl
	cmp	bl, 32					; 00000020H
	jb	SHORT $LL5@serpent_en
; Line 229
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
serpent_enc ENDP
_TEXT	ENDS
PUBLIC	serpent_dec
;	COMDAT pdata
pdata	SEGMENT
$pdata$serpent_dec DD imagerel $LN31
	DD	imagerel $LN31+179
	DD	imagerel $unwind$serpent_dec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$serpent_dec DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT serpent_dec
_TEXT	SEGMENT
key$ = 48
ct$ = 56
pt$ = 64
serpent_dec PROC					; COMDAT
; Line 232
$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 238
	mov	ebp, 4
	mov	rdi, r8
	mov	r9, r8
	sub	rdx, r8
	mov	rsi, rcx
	mov	r8d, ebp
$LL10@serpent_de:
	mov	eax, DWORD PTR [rdx+r9]
	mov	DWORD PTR [r9], eax
	add	r9, rbp
	dec	r8
	jne	SHORT $LL10@serpent_de
; Line 240
	mov	bl, 31
$LL5@serpent_de:
; Line 243
	mov	rcx, rdi
	cmp	bl, 31
	jne	SHORT $LN2@serpent_de
	mov	rdx, rsi
	mov	r8, rbp
	sub	rdx, rdi
$LL15@serpent_de:
	mov	eax, DWORD PTR [rdx+rcx+512]
	xor	DWORD PTR [rcx], eax
	add	rcx, rbp
	dec	r8
	jne	SHORT $LL15@serpent_de
; Line 244
	jmp	SHORT $LN1@serpent_de
$LN2@serpent_de:
; Line 245
	mov	edx, 1
	call	serpent_lt
$LN1@serpent_de:
; Line 248
	mov	r8d, 1
	mov	dl, bl
	mov	rcx, rdi
	call	sbox128
; Line 250
	movsx	rdx, bl
	mov	r11, rdi
	shl	rdx, 4
	mov	rcx, rbp
	sub	rdx, rdi
	add	rdx, rsi
$LL20@serpent_de:
	mov	eax, DWORD PTR [rdx+r11]
	xor	DWORD PTR [r11], eax
	add	r11, rbp
	dec	rcx
	jne	SHORT $LL20@serpent_de
; Line 240
	dec	bl
	jns	SHORT $LL5@serpent_de
; Line 252
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
serpent_dec ENDP
_TEXT	ENDS
END
