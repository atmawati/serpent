; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	c:\github\serpent\serpent.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sbox
PUBLIC	_sbox_inv
_DATA	SEGMENT
_sbox	DB	038H
	DB	0f1H
	DB	0a6H
	DB	05bH
	DB	0edH
	DB	042H
	DB	070H
	DB	09cH
	DB	0fcH
	DB	027H
	DB	090H
	DB	05aH
	DB	01bH
	DB	0e8H
	DB	06dH
	DB	034H
	DB	086H
	DB	079H
	DB	03cH
	DB	0afH
	DB	0d1H
	DB	0e4H
	DB	0bH
	DB	052H
	DB	0fH
	DB	0b8H
	DB	0c9H
	DB	063H
	DB	0d1H
	DB	024H
	DB	0a7H
	DB	05eH
	DB	01fH
	DB	083H
	DB	0c0H
	DB	0b6H
	DB	025H
	DB	04aH
	DB	09eH
	DB	07dH
	DB	0f5H
	DB	02bH
	DB	04aH
	DB	09cH
	DB	03H
	DB	0e8H
	DB	0d6H
	DB	071H
	DB	072H
	DB	0c5H
	DB	084H
	DB	06bH
	DB	0e9H
	DB	01fH
	DB	0d3H
	DB	0a0H
	DB	01dH
	DB	0f0H
	DB	0e8H
	DB	02bH
	DB	074H
	DB	0caH
	DB	093H
	DB	056H
_sbox_inv DB	0d3H
	DB	0b0H
	DB	0a6H
	DB	05cH
	DB	01eH
	DB	047H
	DB	0f9H
	DB	082H
	DB	058H
	DB	02eH
	DB	0f6H
	DB	0c3H
	DB	0b4H
	DB	079H
	DB	01dH
	DB	0a0H
	DB	0c9H
	DB	0f4H
	DB	0beH
	DB	012H
	DB	03H
	DB	06dH
	DB	058H
	DB	0a7H
	DB	09H
	DB	0a7H
	DB	0beH
	DB	06dH
	DB	035H
	DB	0c2H
	DB	048H
	DB	0f1H
	DB	050H
	DB	083H
	DB	0a9H
	DB	07eH
	DB	02cH
	DB	0b6H
	DB	04fH
	DB	0d1H
	DB	08fH
	DB	029H
	DB	041H
	DB	0deH
	DB	0b6H
	DB	053H
	DB	07cH
	DB	0a0H
	DB	0faH
	DB	01dH
	DB	053H
	DB	060H
	DB	049H
	DB	0e7H
	DB	02cH
	DB	08bH
	DB	030H
	DB	06dH
	DB	09eH
	DB	0f8H
	DB	05cH
	DB	0b7H
	DB	0a1H
	DB	042H
_DATA	ENDS
PUBLIC	@blkxor@8
; Function compile flags: /Ogsp
;	COMDAT @blkxor@8
_TEXT	SEGMENT
@blkxor@8 PROC						; COMDAT
; _dst$ = ecx
; _src$ = edx
; File c:\github\serpent\serpent.c
; Line 15
	push	4
	mov	eax, edx
	pop	edx
	sub	eax, ecx
	push	esi
$LL3@:
; Line 16
	mov	esi, DWORD PTR [eax+ecx]
	xor	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL3@
	pop	esi
; Line 18
	ret	0
@blkxor@8 ENDP
_TEXT	ENDS
PUBLIC	@blkcpy@8
; Function compile flags: /Ogsp
;	COMDAT @blkcpy@8
_TEXT	SEGMENT
@blkcpy@8 PROC						; COMDAT
; _dst$ = ecx
; _src$ = edx
; Line 24
	push	4
	mov	eax, edx
	pop	edx
	sub	eax, ecx
	push	esi
$LL3@:
; Line 25
	mov	esi, DWORD PTR [eax+ecx]
	mov	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL3@
	pop	esi
; Line 27
	ret	0
@blkcpy@8 ENDP
_TEXT	ENDS
PUBLIC	@blkclr@4
; Function compile flags: /Ogsp
;	COMDAT @blkclr@4
_TEXT	SEGMENT
@blkclr@4 PROC						; COMDAT
; _blk$ = ecx
; Line 30
	push	edi
; Line 34
	xor	eax, eax
	mov	edi, ecx
	stosd
	stosd
	stosd
	stosd
	pop	edi
; Line 36
	ret	0
@blkclr@4 ENDP
_TEXT	ENDS
PUBLIC	@serpent_ip@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_ip@8
_TEXT	SEGMENT
tv181 = -4						; size = 4
@serpent_ip@8 PROC					; COMDAT
; _in$ = ecx
; _out$ = edx
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 68
	xor	eax, eax
	mov	edi, edx
	stosd
	stosd
	stosd
	stosd
; Line 70
	mov	esi, edx
	mov	DWORD PTR tv181[ebp], 16		; 00000010H
$LL6@:
; Line 71
	push	8
	xor	edi, edi
	pop	ebx
$LL3@:
; Line 72
	mov	eax, edi
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN20@
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN20@:
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	dl, BYTE PTR [eax]
	shr	DWORD PTR [eax], 1
	and	dl, 1
; Line 73
	mov	dl, BYTE PTR [esi]
	sete	al
	dec	al
	and	al, 128					; 00000080H
	shr	dl, 1
	or	al, dl
	inc	edi
	dec	ebx
	mov	BYTE PTR [esi], al
	jne	SHORT $LL3@
; Line 70
	inc	esi
	dec	DWORD PTR tv181[ebp]
	jne	SHORT $LL6@
	pop	edi
	pop	esi
	pop	ebx
; Line 76
	leave
	ret	0
@serpent_ip@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_fp@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_fp@8
_TEXT	SEGMENT
tv286 = -8						; size = 4
tv158 = -4						; size = 4
@serpent_fp@8 PROC					; COMDAT
; _in$ = ecx
; _out$ = edx
; Line 82
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 86
	xor	eax, eax
	mov	edi, edx
	stosd
	stosd
	stosd
	stosd
; Line 88
	mov	eax, ecx
	mov	DWORD PTR tv286[ebp], 4
$LL6@:
; Line 89
	xor	edi, edi
	mov	DWORD PTR tv158[ebp], 32		; 00000020H
$LL3@:
; Line 90
	mov	cl, BYTE PTR [eax]
	shr	DWORD PTR [eax], 1
; Line 91
	mov	esi, edi
	and	cl, 1
	and	esi, -2147483645			; 80000003H
	jns	SHORT $LN20@
	dec	esi
	or	esi, -4					; fffffffcH
	inc	esi
$LN20@:
	movzx	ecx, cl
	neg	ecx
	sbb	ecx, ecx
	lea	esi, DWORD PTR [edx+esi*4]
	mov	ebx, DWORD PTR [esi]
	and	ecx, -2147483648			; 80000000H
	shr	ebx, 1
	or	ecx, ebx
	inc	edi
	dec	DWORD PTR tv158[ebp]
	mov	DWORD PTR [esi], ecx
	jne	SHORT $LL3@
; Line 88
	add	eax, 4
	dec	DWORD PTR tv286[ebp]
	jne	SHORT $LL6@
	pop	edi
	pop	esi
	pop	ebx
; Line 94
	leave
	ret	0
@serpent_fp@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_lt@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_lt@8
_TEXT	SEGMENT
_x3$ = -8						; size = 4
_x1$ = -4						; size = 4
@serpent_lt@8 PROC					; COMDAT
; _x$ = ecx
; _type$ = edx
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 103
	mov	eax, DWORD PTR [ecx]
	push	ebx
; Line 105
	mov	ebx, DWORD PTR [ecx+8]
	push	esi
	mov	esi, edx
; Line 106
	mov	edx, DWORD PTR [ecx+12]
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR _x1$[ebp], edi
	mov	DWORD PTR _x3$[ebp], edx
; Line 108
	test	esi, esi
	jne	SHORT $LN2@
; Line 109
	rol	eax, 13					; 0000000dH
; Line 110
	rol	ebx, 3
; Line 111
	mov	esi, ebx
	xor	esi, edi
	xor	esi, eax
; Line 112
	mov	edi, eax
	shl	edi, 3
	xor	edi, edx
; Line 113
	rol	esi, 1
	xor	edi, ebx
; Line 114
	rol	edi, 7
	mov	DWORD PTR _x1$[ebp], esi
; Line 115
	mov	edx, edi
	xor	edx, esi
; Line 116
	shl	esi, 7
	xor	edx, eax
; Line 119
	mov	eax, DWORD PTR _x1$[ebp]
	xor	esi, edi
	xor	esi, ebx
	rol	edx, 5
	ror	esi, 10					; 0000000aH
	jmp	SHORT $LN1@
$LN2@:
; Line 122
	mov	esi, edi
	shl	esi, 7
	rol	ebx, 10					; 0000000aH
	xor	esi, ebx
	xor	esi, edx
	ror	eax, 5
; Line 123
	xor	edx, eax
	xor	edx, edi
; Line 124
	mov	edi, DWORD PTR _x3$[ebp]
	ror	edi, 7
; Line 126
	mov	eax, edx
	shl	eax, 3
	xor	edi, eax
	mov	eax, DWORD PTR _x1$[ebp]
	xor	edi, esi
	ror	eax, 1
; Line 127
	xor	eax, esi
	xor	eax, edx
; Line 128
	ror	esi, 3
; Line 129
	ror	edx, 13					; 0000000dH
$LN1@:
; Line 135
	mov	DWORD PTR [ecx+12], edi
	pop	edi
	mov	DWORD PTR [ecx+8], esi
	pop	esi
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	pop	ebx
; Line 136
	leave
	ret	0
@serpent_lt@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_gen_w@8
; Function compile flags: /Ogsp
;	COMDAT @serpent_gen_w@8
_TEXT	SEGMENT
@serpent_gen_w@8 PROC					; COMDAT
; _b$ = ecx
; _i$ = edx
; Line 143
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, DWORD PTR [ecx+20]
	xor	eax, DWORD PTR [ecx+12]
	xor	eax, DWORD PTR [ecx]
	xor	eax, edx
	xor	eax, -1640531527			; 9e3779b9H
; Line 144
	rol	eax, 11					; 0000000bH
; Line 145
	ret	0
@serpent_gen_w@8 ENDP
_TEXT	ENDS
PUBLIC	@sbox128@12
; Function compile flags: /Ogsp
;	COMDAT @sbox128@12
_TEXT	SEGMENT
_tmp_blk$ = -32						; size = 16
_sb$ = -16						; size = 16
_type$ = 8						; size = 4
@sbox128@12 PROC					; COMDAT
; _blk$ = ecx
; _box_idx$ = dl
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
; Line 153
	and	dl, 7
; Line 155
	cmp	DWORD PTR _type$[ebp], 0
	push	edi
; Line 156
	movzx	esi, dl
	jne	SHORT $LN8@
	lea	esi, DWORD PTR _sbox[esi*8]
; Line 157
	jmp	SHORT $LN7@
$LN8@:
; Line 158
	lea	esi, DWORD PTR _sbox_inv[esi*8]
$LN7@:
; Line 161
	push	8
	lea	edx, DWORD PTR _sb$[ebp+1]
	pop	edi
$LL6@:
; Line 162
	mov	al, BYTE PTR [esi]
; Line 163
	mov	bl, al
	shr	bl, 4
; Line 164
	and	al, 15					; 0000000fH
	mov	BYTE PTR [edx-1], bl
	mov	BYTE PTR [edx], al
	inc	esi
	add	edx, 2
	dec	edi
	jne	SHORT $LL6@
; Line 167
	lea	edx, DWORD PTR _tmp_blk$[ebp]
	call	@serpent_ip@8
	push	16					; 00000010H
	lea	edx, DWORD PTR _tmp_blk$[ebp]
	pop	esi
$LL3@:
; Line 171
	movzx	eax, BYTE PTR [edx]
	mov	edi, eax
	shr	edi, 4
	mov	bl, BYTE PTR _sb$[ebp+edi]
	shl	bl, 4
	and	eax, 15					; 0000000fH
	or	bl, BYTE PTR _sb$[ebp+eax]
	mov	BYTE PTR [edx], bl
	inc	edx
	dec	esi
	jne	SHORT $LL3@
; Line 173
	mov	edx, ecx
	lea	ecx, DWORD PTR _tmp_blk$[ebp]
	call	@serpent_fp@8
	pop	edi
	pop	esi
	pop	ebx
; Line 174
	leave
	ret	4
@sbox128@12 ENDP
_TEXT	ENDS
PUBLIC	@serpent_setkey@12
;EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT @serpent_setkey@12
_TEXT	SEGMENT
_x$ = -36						; size = 32
_key$ = -4						; size = 4
tv538 = 8						; size = 4
_inlen$ = 8						; size = 4
@serpent_setkey@12 PROC					; COMDAT
; _key$ = ecx
; _input$ = edx
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
; Line 189
	mov	ebx, DWORD PTR _inlen$[ebp]
	push	esi
	push	edi
	mov	DWORD PTR _key$[ebp], ecx
	push	8
	xor	eax, eax
	pop	ecx
	lea	edi, DWORD PTR _x$[ebp]
	rep stosd
	mov	al, 32					; 00000020H
	cmp	ebx, 32					; 00000020H
	ja	SHORT $LN23@
	mov	al, bl
$LN23@:
; Line 191
	test	al, al
	je	SHORT $LN16@
	movzx	eax, al
	push	eax
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	;call	_memcpy
	add	esp, 12					; 0000000cH
$LN16@:
; Line 199
	cmp	ebx, 32					; 00000020H
	jae	SHORT $LN13@
; Line 200
	lea	eax, DWORD PTR _x$[ebp+ebx]
	or	BYTE PTR [eax], 1
$LN13@:
; Line 203
	mov	eax, DWORD PTR _key$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv538[ebp], 33		; 00000021H
$LL12@:
; Line 204
	push	4
	pop	ebx
$LL9@:
; Line 205
	mov	ecx, edx
	xor	ecx, DWORD PTR _x$[ebp]
; Line 209
	push	7
	xor	ecx, DWORD PTR _x$[ebp+20]
	lea	esi, DWORD PTR _x$[ebp+4]
	xor	ecx, DWORD PTR _x$[ebp+12]
	lea	edi, DWORD PTR _x$[ebp]
	xor	ecx, DWORD PTR _x$[ebp+28]
	xor	ecx, -1640531527			; 9e3779b9H
	rol	ecx, 11					; 0000000bH
	mov	DWORD PTR [eax], ecx
	pop	ecx
	rep movsd
; Line 212
	mov	ecx, DWORD PTR [eax]
	add	eax, 4
	inc	edx
	dec	ebx
	mov	DWORD PTR _x$[ebp+28], ecx
	jne	SHORT $LL9@
; Line 203
	dec	DWORD PTR tv538[ebp]
	jne	SHORT $LL12@
; Line 215
	mov	esi, DWORD PTR _key$[ebp]
	xor	bl, bl
$LL3@:
; Line 216
	mov	dl, 3
	push	0
	sub	dl, bl
	mov	ecx, esi
	call	@sbox128@12
	inc	bl
	add	esi, 16					; 00000010H
	cmp	bl, 32					; 00000020H
	jbe	SHORT $LL3@
	pop	edi
	pop	esi
	pop	ebx
; Line 218
	leave
	ret	4
@serpent_setkey@12 ENDP
_TEXT	ENDS
PUBLIC	@serpent_enc@12
; Function compile flags: /Ogsp
;	COMDAT @serpent_enc@12
_TEXT	SEGMENT
_ct$ = 8						; size = 4
@serpent_enc@12 PROC					; COMDAT
; _key$ = ecx
; _pt$ = edx
; Line 221
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 227
	mov	esi, DWORD PTR _ct$[ebp]
	push	edi
	mov	edi, ecx
	mov	ecx, esi
	call	@blkcpy@8
; Line 229
	xor	bl, bl
$LL5@:
; Line 231
	movzx	edx, bl
	shl	edx, 4
	add	edx, edi
	mov	ecx, esi
	call	@blkxor@8
; Line 233
	push	0
	mov	dl, bl
	mov	ecx, esi
	call	@sbox128@12
; Line 236
	mov	ecx, esi
	cmp	bl, 31					; 0000001fH
	jne	SHORT $LN2@
	lea	edx, DWORD PTR [edi+512]
	call	@blkxor@8
; Line 237
	jmp	SHORT $LN4@
$LN2@:
; Line 239
	xor	edx, edx
	call	@serpent_lt@8
$LN4@:
; Line 229
	inc	bl
	cmp	bl, 32					; 00000020H
	jb	SHORT $LL5@
	pop	edi
	pop	esi
	pop	ebx
; Line 242
	pop	ebp
	ret	4
@serpent_enc@12 ENDP
_TEXT	ENDS
PUBLIC	@serpent_dec@12
; Function compile flags: /Ogsp
;	COMDAT @serpent_dec@12
_TEXT	SEGMENT
_pt$ = 8						; size = 4
@serpent_dec@12 PROC					; COMDAT
; _key$ = ecx
; _ct$ = edx
; Line 245
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 251
	mov	edi, DWORD PTR _pt$[ebp]
	mov	esi, ecx
	mov	ecx, edi
	call	@blkcpy@8
; Line 253
	mov	bl, 32					; 00000020H
$LL5@:
; Line 256
	mov	ecx, edi
	cmp	bl, 32					; 00000020H
	jne	SHORT $LN2@
	lea	edx, DWORD PTR [esi+512]
	call	@blkxor@8
; Line 257
	jmp	SHORT $LN1@
$LN2@:
; Line 258
	xor	edx, edx
	inc	edx
	call	@serpent_lt@8
$LN1@:
; Line 261
	push	1
	lea	edx, DWORD PTR [ebx-1]
	mov	ecx, edi
	call	@sbox128@12
; Line 263
	movsx	eax, bl
	add	eax, eax
	lea	edx, DWORD PTR [esi+eax*8-16]
	mov	ecx, edi
	call	@blkxor@8
	dec	bl
	test	bl, bl
	jg	SHORT $LL5@
	pop	edi
	pop	esi
	pop	ebx
; Line 265
	pop	ebp
	ret	4
@serpent_dec@12 ENDP
_TEXT	ENDS
END
