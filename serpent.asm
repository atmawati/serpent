; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	c:\gh\serpent\serpent.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sbox
PUBLIC	_sbox_inv
_DATA	SEGMENT
_sbox	DB	038H
	DB	0f1H
	DB	0a6H
	DB	05bH
	DB	0edH
	DB	042H
	DB	070H
	DB	09cH
	DB	0fcH
	DB	027H
	DB	090H
	DB	05aH
	DB	01bH
	DB	0e8H
	DB	06dH
	DB	034H
	DB	086H
	DB	079H
	DB	03cH
	DB	0afH
	DB	0d1H
	DB	0e4H
	DB	0bH
	DB	052H
	DB	0fH
	DB	0b8H
	DB	0c9H
	DB	063H
	DB	0d1H
	DB	024H
	DB	0a7H
	DB	05eH
	DB	01fH
	DB	083H
	DB	0c0H
	DB	0b6H
	DB	025H
	DB	04aH
	DB	09eH
	DB	07dH
	DB	0f5H
	DB	02bH
	DB	04aH
	DB	09cH
	DB	03H
	DB	0e8H
	DB	0d6H
	DB	071H
	DB	072H
	DB	0c5H
	DB	084H
	DB	06bH
	DB	0e9H
	DB	01fH
	DB	0d3H
	DB	0a0H
	DB	01dH
	DB	0f0H
	DB	0e8H
	DB	02bH
	DB	074H
	DB	0caH
	DB	093H
	DB	056H
_sbox_inv DB	0d3H
	DB	0b0H
	DB	0a6H
	DB	05cH
	DB	01eH
	DB	047H
	DB	0f9H
	DB	082H
	DB	058H
	DB	02eH
	DB	0f6H
	DB	0c3H
	DB	0b4H
	DB	079H
	DB	01dH
	DB	0a0H
	DB	0c9H
	DB	0f4H
	DB	0beH
	DB	012H
	DB	03H
	DB	06dH
	DB	058H
	DB	0a7H
	DB	09H
	DB	0a7H
	DB	0beH
	DB	06dH
	DB	035H
	DB	0c2H
	DB	048H
	DB	0f1H
	DB	050H
	DB	083H
	DB	0a9H
	DB	07eH
	DB	02cH
	DB	0b6H
	DB	04fH
	DB	0d1H
	DB	08fH
	DB	029H
	DB	041H
	DB	0deH
	DB	0b6H
	DB	053H
	DB	07cH
	DB	0a0H
	DB	0faH
	DB	01dH
	DB	053H
	DB	060H
	DB	049H
	DB	0e7H
	DB	02cH
	DB	08bH
	DB	030H
	DB	06dH
	DB	09eH
	DB	0f8H
	DB	05cH
	DB	0b7H
	DB	0a1H
	DB	042H
_DATA	ENDS
PUBLIC	@blkxor@8
; Function compile flags: /Ogspy
;	COMDAT @blkxor@8
_TEXT	SEGMENT
@blkxor@8 PROC						; COMDAT
; _dst$ = ecx
; _src$ = edx
; File c:\gh\serpent\serpent.c
; Line 18
	push	4
	mov	eax, edx
	pop	edx
	sub	eax, ecx
	push	esi
$LL3@:
; Line 19
	mov	esi, DWORD PTR [eax+ecx]
	xor	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL3@
	pop	esi
; Line 21
	ret	0
@blkxor@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_ip@8
; Function compile flags: /Ogspy
;	COMDAT @serpent_ip@8
_TEXT	SEGMENT
@serpent_ip@8 PROC					; COMDAT
; _out$ = ecx
; _in$ = edx
; Line 47
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 52
	xor	eax, eax
	mov	edi, ecx
	stosd
	stosd
	stosd
; Line 55
	push	16					; 00000010H
	stosd
	mov	esi, ecx
	pop	ebx
$LL6@:
; Line 56
	push	8
	xor	edi, edi
	pop	ebp
$LL3@:
; Line 57
	mov	eax, edi
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN18@
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN18@:
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	al, BYTE PTR [ecx]
; Line 58
	shr	DWORD PTR [ecx], 1
; Line 59
	mov	cl, BYTE PTR [esi]
	and	al, 1
	shr	cl, 1
	shl	al, 7
	or	cl, al
	inc	edi
	dec	ebp
	mov	BYTE PTR [esi], cl
	jne	SHORT $LL3@
; Line 55
	inc	esi
	dec	ebx
	jne	SHORT $LL6@
; Line 62
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
@serpent_ip@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_fp@8
; Function compile flags: /Ogspy
;	COMDAT @serpent_fp@8
_TEXT	SEGMENT
tv285 = -8						; size = 4
tv157 = -4						; size = 4
@serpent_fp@8 PROC					; COMDAT
; _out$ = ecx
; _in$ = edx
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 71
	xor	eax, eax
	mov	edi, ecx
	stosd
	stosd
	stosd
	stosd
; Line 74
	mov	eax, edx
	mov	DWORD PTR tv285[ebp], 4
$LL6@:
; Line 75
	xor	edi, edi
	mov	DWORD PTR tv157[ebp], 32		; 00000020H
$LL3@:
; Line 76
	mov	dl, BYTE PTR [eax]
; Line 77
	shr	DWORD PTR [eax], 1
; Line 78
	mov	esi, edi
	and	dl, 1
	and	esi, -2147483645			; 80000003H
	jns	SHORT $LN18@
	dec	esi
	or	esi, -4					; fffffffcH
	inc	esi
$LN18@:
	lea	esi, DWORD PTR [ecx+esi*4]
	mov	ebx, DWORD PTR [esi]
	movzx	edx, dl
	shl	edx, 31					; 0000001fH
	shr	ebx, 1
	or	edx, ebx
	inc	edi
	dec	DWORD PTR tv157[ebp]
	mov	DWORD PTR [esi], edx
	jne	SHORT $LL3@
; Line 74
	add	eax, 4
	dec	DWORD PTR tv285[ebp]
	jne	SHORT $LL6@
	pop	edi
	pop	esi
	pop	ebx
; Line 81
	leave
	ret	0
@serpent_fp@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_gen_w@8
; Function compile flags: /Ogspy
;	COMDAT @serpent_gen_w@8
_TEXT	SEGMENT
@serpent_gen_w@8 PROC					; COMDAT
; _b$ = ecx
; _i$ = edx
; Line 88
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, DWORD PTR [ecx+20]
	xor	eax, DWORD PTR [ecx+12]
	xor	eax, DWORD PTR [ecx]
	xor	eax, edx
	xor	eax, -1640531527			; 9e3779b9H
; Line 89
	rol	eax, 11					; 0000000bH
; Line 90
	ret	0
@serpent_gen_w@8 ENDP
_TEXT	ENDS
PUBLIC	@sbox128@12
; Function compile flags: /Ogspy
;	COMDAT @sbox128@12
_TEXT	SEGMENT
_tmp_blk$ = -128					; size = 64
_sb$ = -64						; size = 64
_type$ = 8						; size = 4
@sbox128@12 PROC					; COMDAT
; _blk$ = ecx
; _box_idx$ = edx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	mov	ebx, ecx
; Line 99
	and	edx, 7
; Line 101
	xor	ecx, ecx
	push	esi
; Line 102
	lea	esi, DWORD PTR _sbox[edx*8]
	cmp	DWORD PTR _type$[ebp], ecx
	je	SHORT $LN7@
; Line 104
	lea	esi, DWORD PTR _sbox_inv[edx*8]
$LN7@:
	push	edi
; Line 107
	push	8
	pop	edi
$LL6@:
; Line 108
	mov	eax, ecx
	shr	eax, 1
	mov	al, BYTE PTR [eax+esi]
; Line 109
	mov	dl, al
	shr	dl, 4
; Line 110
	and	al, 15					; 0000000fH
	mov	BYTE PTR _sb$[ebp+ecx], dl
	mov	BYTE PTR _sb$[ebp+ecx+1], al
	add	ecx, 2
	dec	edi
	jne	SHORT $LL6@
; Line 113
	mov	edx, ebx
	lea	ecx, DWORD PTR _tmp_blk$[ebp]
	call	@serpent_ip@8
	push	16					; 00000010H
	pop	esi
	lea	ecx, DWORD PTR _tmp_blk$[ebp]
	pop	edi
$LL3@:
; Line 117
	movzx	eax, BYTE PTR [ecx]
	mov	edx, eax
	shr	edx, 4
	mov	dl, BYTE PTR _sb$[ebp+edx]
	shl	dl, 4
	and	eax, 15					; 0000000fH
	or	dl, BYTE PTR _sb$[ebp+eax]
	mov	BYTE PTR [ecx], dl
	inc	ecx
	dec	esi
	jne	SHORT $LL3@
; Line 119
	lea	edx, DWORD PTR _tmp_blk$[ebp]
	mov	ecx, ebx
	call	@serpent_fp@8
	pop	esi
	pop	ebx
; Line 120
	leave
	ret	4
@sbox128@12 ENDP
_TEXT	ENDS
PUBLIC	@serpent_lt@8
; Function compile flags: /Ogspy
;	COMDAT @serpent_lt@8
_TEXT	SEGMENT
_x1$ = -8						; size = 4
_x$ = -4						; size = 4
@serpent_lt@8 PROC					; COMDAT
; _x$ = ecx
; _type$ = edx
; Line 124
	push	ecx
	push	ecx
; Line 128
	mov	eax, DWORD PTR [ecx]
	push	ebx
	push	ebp
; Line 129
	mov	ebp, DWORD PTR [ecx+4]
	push	esi
	push	edi
; Line 130
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$[esp+24], ecx
; Line 131
	mov	ecx, DWORD PTR [ecx+12]
; Line 133
	test	edx, edx
	jne	SHORT $LN2@
; Line 134
	rol	eax, 13					; 0000000dH
; Line 135
	rol	edi, 3
; Line 137
	mov	ebx, eax
	shl	ebx, 3
	mov	edx, edi
	xor	edx, ebp
	xor	edx, eax
; Line 138
	rol	edx, 1
	xor	ebx, ecx
	xor	ebx, edi
; Line 139
	rol	ebx, 7
	mov	DWORD PTR _x1$[esp+24], edx
; Line 144
	mov	ebp, DWORD PTR _x1$[esp+24]
	mov	esi, ebx
	xor	esi, edx
	shl	edx, 7
	xor	edx, ebx
	xor	esi, eax
	xor	edx, edi
	rol	esi, 5
	ror	edx, 10					; 0000000aH
	jmp	SHORT $LN1@
$LN2@:
; Line 145
	rol	edi, 10					; 0000000aH
; Line 147
	mov	edx, ebp
	shl	edx, 7
	xor	edx, edi
	xor	edx, ecx
	ror	eax, 5
; Line 148
	xor	eax, ecx
	xor	eax, ebp
	mov	esi, eax
; Line 149
	ror	ecx, 7
; Line 151
	mov	ebx, esi
	shl	ebx, 3
	xor	ebx, ecx
	xor	ebx, edx
	ror	ebp, 1
; Line 152
	xor	ebp, edx
	xor	ebp, esi
; Line 153
	ror	edx, 3
; Line 154
	ror	esi, 13					; 0000000dH
$LN1@:
; Line 157
	mov	eax, DWORD PTR _x$[esp+24]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
; Line 158
	mov	DWORD PTR [eax+4], ebp
	pop	ebp
; Line 160
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+8], edx
	pop	ebx
; Line 161
	pop	ecx
	pop	ecx
	ret	0
@serpent_lt@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_setkey@8
EXTRN	_memcpy:PROC
; Function compile flags: /Ogspy
;	COMDAT @serpent_setkey@8
_TEXT	SEGMENT
_s_ws$ = -40						; size = 32
_key$ = -8						; size = 4
tv343 = -4						; size = 4
@serpent_setkey@8 PROC					; COMDAT
; _key$ = ecx
; _input$ = edx
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
; Line 175
	push	32					; 00000020H
	push	edx
	lea	eax, DWORD PTR _s_ws$[ebp]
	mov	esi, ecx
	push	eax
	mov	DWORD PTR _key$[ebp], esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 179
	xor	edx, edx
	mov	DWORD PTR tv343[ebp], esi
	push	ebx
$LL25@:
; Line 180
	mov	eax, DWORD PTR tv343[ebp]
	push	4
	pop	ebx
$LL6@:
; Line 181
	mov	ecx, edx
	xor	ecx, DWORD PTR _s_ws$[ebp]
; Line 182
	push	7
	xor	ecx, DWORD PTR _s_ws$[ebp+20]
	lea	esi, DWORD PTR _s_ws$[ebp+4]
	xor	ecx, DWORD PTR _s_ws$[ebp+12]
	lea	edi, DWORD PTR _s_ws$[ebp]
	xor	ecx, DWORD PTR _s_ws$[ebp+28]
	xor	ecx, -1640531527			; 9e3779b9H
	rol	ecx, 11					; 0000000bH
	mov	DWORD PTR [eax], ecx
	pop	ecx
	rep movsd
; Line 183
	mov	ecx, DWORD PTR [eax]
	add	eax, 4
	inc	edx
	dec	ebx
	mov	DWORD PTR _s_ws$[ebp+28], ecx
	jne	SHORT $LL6@
; Line 179
	add	DWORD PTR tv343[ebp], 64		; 00000040H
	cmp	edx, 128				; 00000080H
	jbe	SHORT $LL25@
; Line 187
	mov	edi, DWORD PTR _key$[ebp]
	xor	esi, esi
	pop	ebx
$LL3@:
; Line 188
	push	0
	push	3
	pop	edx
	sub	edx, esi
	mov	ecx, edi
	call	@sbox128@12
	inc	esi
	add	edi, 64					; 00000040H
	cmp	esi, 32					; 00000020H
	jbe	SHORT $LL3@
	pop	edi
	pop	esi
; Line 190
	leave
	ret	0
@serpent_setkey@8 ENDP
_TEXT	ENDS
PUBLIC	@serpent_encrypt@12
; Function compile flags: /Ogspy
;	COMDAT @serpent_encrypt@12
_TEXT	SEGMENT
_enc$ = 8						; size = 4
_i$ = 11						; size = 1
@serpent_encrypt@12 PROC				; COMDAT
; _in$ = ecx
; _key$ = edx
; Line 193
	push	ebp
	mov	ebp, esp
; Line 197
	cmp	DWORD PTR _enc$[ebp], 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	ebx, ecx
	jne	SHORT $LN12@
; Line 199
	mov	BYTE PTR _i$[ebp], 0
$LL19@:
; Line 201
	movsx	esi, BYTE PTR _i$[ebp]
	mov	edx, esi
	shl	edx, 6
	add	edx, edi
	mov	ecx, ebx
	call	@blkxor@8
; Line 203
	push	0
	mov	edx, esi
	mov	ecx, ebx
	call	@sbox128@12
; Line 205
	cmp	BYTE PTR _i$[ebp], 31			; 0000001fH
; Line 206
	mov	ecx, ebx
	jne	SHORT $LN8@
	lea	edx, DWORD PTR [edi+2048]
	call	@blkxor@8
; Line 207
	jmp	SHORT $LN10@
$LN8@:
; Line 208
	xor	edx, edx
	call	@serpent_lt@8
$LN10@:
; Line 199
	inc	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], 32			; 00000020H
	jl	SHORT $LL19@
; Line 211
	jmp	SHORT $LN3@
$LN12@:
; Line 212
	mov	BYTE PTR _i$[ebp], 32			; 00000020H
$LL20@:
; Line 213
	cmp	BYTE PTR _i$[ebp], 32			; 00000020H
; Line 215
	mov	ecx, ebx
	jne	SHORT $LN2@
	lea	edx, DWORD PTR [edi+2048]
	call	@blkxor@8
; Line 216
	jmp	SHORT $LN1@
$LN2@:
; Line 218
	xor	edx, edx
	inc	edx
	call	@serpent_lt@8
$LN1@:
; Line 221
	movsx	esi, BYTE PTR _i$[ebp]
	push	1
	lea	edx, DWORD PTR [esi-1]
	mov	ecx, ebx
	call	@sbox128@12
; Line 223
	shl	esi, 6
	lea	edx, DWORD PTR [esi+edi-64]
	mov	ecx, ebx
	call	@blkxor@8
	dec	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], 0
	jg	SHORT $LL20@
$LN3@:
	pop	edi
	pop	esi
	pop	ebx
; Line 226
	pop	ebp
	ret	4
@serpent_encrypt@12 ENDP
_TEXT	ENDS
END
